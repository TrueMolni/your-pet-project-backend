{
  "openapi": "3.0.0",
  "info": {
    "title": "API Documentation",
    "version": "1.0.9",
    "description": "Documentation for the API endpoints. Team project with React & Node.js "
  },
  "consumes": ["application/json", "multipart/form-data"],
  "produces": ["application/json", "multipart/form-data"],
  "servers": [{ "url": "http://localhost:3030" }],
  "tags": [
    {
      "name": "Auth",
      "description": "Authorization endpoints"
    },
    {
      "name": "Notices",
      "description": "Notice endpoints"
    },
    {
      "name": "Pets",
      "description": "Pet endpoints"
    }
  ],

  "paths": {
    "/register": {
      "post": {
        "tags": ["Auth"],
        "summary": "Get endpoint",
        "responses": {
          "200": {
            "description": "Success response"
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    },

    "/login": {
      "post": {
        "tags": ["Auth"],
        "summary": "Get endpoint",
        "responses": {
          "200": {
            "description": "Success response"
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    },

    "/api/notices/search": {
      "get": {
        "tags": ["Notices"],
        "summary": "Search for a notice by title",
        "parameters": [
          {
            "in": "query",
            "name": "title",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Search query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success response",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {}
          }
        }
      }
    },

    "/api/notices/category/{categoryId}": {
      "get": {
        "tags": ["Notices"],
        "summary": "Get notices by category",
        "parameters": [
          {
            "in": "path",
            "name": "categoryId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Category ID ('sell', 'lost-found', 'for-free')"
          }
        ],
        "responses": {
          "200": {
            "description": "Success response",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {}
          }
        }
      }
    },

    "/api/notices/{noticeId}": {
      "get": {
        "tags": ["Notices"],
        "summary": "Get one notice by id",
        "description": "",
        "operationId": "getNoticeById",
        "parameters": [
          {
            "in": "path",
            "name": "noticeId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Search for a notice by id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NoticeSchema"
                }
              }
            }
          },
          "404": {
            "description": "Notice not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },

    "/api/notices/favorite/{noticeId}": {
      "patch": {
        "tags": ["Notices"],
        "summary": "Update favorite status",
        "description": "",
        "operationId": "updateFavoriteStatus",
        "parameters": [{ "name": "noticeId", "in": "path", "required": true }],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FavoriteNotices"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "400": {
            "description": "Bad request"
          }
        },
        "security": [{ "Bearer": [] }]
      }
    },

    "/api/notices/favorite": {
      "get": {
        "tags": ["Notices"],
        "summary": "Get favorite notices",
        "description": "",
        "operationId": "get Notice",
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Notices"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          }
        },
        "security": [{ "Bearer": [] }]
      }
    },

    "/api/notices/notice": {
      "post": {
        "tags": ["Notices"],
        "summary": "Add new notice",
        "description": "",
        "operationId": "addNotice",
        "parameters": [],
        "requestBody": {
          "description": "New notice data",
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/NewNotice"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "successful operation"
          },
          "401": {
            "description": "Unauthorized"
          },
          "400": {
            "description": "Bad request"
          }
        },
        "security": [{ "Bearer": [] }]
      }
    },

    "/api/notices/own": {
      "get": {
        "tags": ["Notices"],
        "summary": "Get own notices",
        "description": " ",
        "operationId": "getOwnNotice",
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Notices"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          }
        },
        "security": [{ "Bearer": [] }]
      }
    },

    "/api/notices/{noticeId}": {
      "delete": {
        "tags": ["Notices"],
        "summary": "Delete a notice of an authorized user",
        "description": "",
        "operationId": "deleteNotice",
        "parameters": [{ "name": "noticeId", "in": "path", "required": true }],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "integer",
                      "description": "Notice id",
                      "example": "6418cb61dea99f728afd5b48"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Not authorized"
          },
          "404": {
            "description": "Notice not found"
          },
          "409": {
            "description": "Notice with id: {noticeId} not in favorites"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [{ "Bearer": [] }]
      }
    },

    "/pet": {
      "post": {
        "tags": ["Pets"],
        "summary": "Create endpoint",
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad request"
          }
        }
      },
      "delete": {
        "tags": ["Pets"],
        "summary": "Delete endpoint",
        "responses": {
          "201": {
            "description": "Deleted"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    }
  },

  "components": {
    "schemas": {
      "NewNotice": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "minLength": 16,
            "maxLength": 35,
            "example": "Beautiful Golden Retriever Puppy for Sale"
          },
          "category": {
            "type": "string",
            "enum": ["sell", "lost-found", "for-free"],
            "example": "sell"
          },
          "name": {
            "type": "string",
            "minLength": 2,
            "maxLength": 16,
            "example": "Luna"
          },
          "date": {
            "type": "string",
            "format": "date",
            "pattern": "^(\\d{2})\\.(\\d{2})\\.(\\d{4})$",
            "example": "22.09.2022"
          },
          "breed": {
            "type": "string",
            "minLength": 2,
            "maxLength": 26,
            "example": "Golden Retriever"
          },
          "avatarURL": {
            "type": "string",
            "format": "binary",
            "maxLength": "3MB",
            "example": "https://www.purina.ua/sites/default/files/2021-02/BREED%20Hero_0059_golden_retriever.jpg"
          },
          "sex": {
            "type": "string",
            "enum": ["male", "female"],
            "example": "female"
          },
          "location": {
            "type": "string",
            "pattern": "^[A-Za-z\\s\\d_,-]+$",
            "example": "Los Angeles, CA"
          },
          "price": {
            "type": "number",
            "minimum": 1,
            "example": 800
          },
          "comments": {
            "type": "string",
            "minLength": 8,
            "maxLength": 120,
            "example": "Friendly and playful dog"
          }
        },
        "required": ["title", "category", "name", "date", "breed", "avatarURL"]
      },

      "Notices": {
        "type": "object",
        "properties": {
          "notices": {
            "type": "array",
            "items": {
              "type": "object",
              "$ref": "#/components/schemas/Notice"
            }
          }
        }
      },

      "NoticeSchema": {
        "type": "object",
        "required": [
          "category",
          "title",
          "name",
          "date",
          "breed",
          "sex",
          "comments"
        ],
        "properties": {
          "_id": {
            "type": "string",
            "description": "Notice id",
            "example": "63f72058bbba3338d0016353"
          },
          "category": {
            "type": "string",
            "description": "The Pet's category should be one of sell, lost-found, for-free",
            "example": "sell"
          },
          "title": {
            "type": "string",
            "description": "Notices title",
            "example": "Small fluffy hamster for sale, a descendant of a pet grizzly bear"
          },
          "name": {
            "type": "string",
            "description": "Pet's name",
            "example": "Pipectobi"
          },
          "date": {
            "type": "string",
            "format": "dateTime",
            "description": "Pet's birthday",
            "example": "13.13.2013"
          },
          "breed": {
            "type": "string",
            "description": "Pet's breed",
            "example": "Grizzly bear (YA tvoy dom truba shatal)"
          },
          "sex": {
            "type": "string",
            "description": "Pet's sex must be male or female",
            "example": "male"
          },
          "location": {
            "type": "string",
            "description": "Pet's location",
            "example": "New York, NY"
          },
          "price": {
            "type": "integer",
            "description": "Pet's price",
            "example": "500"
          },
          "avatarURL": {
            "type": "string",
            "description": "Pet's photo",
            "avatarURL": "https://res.cloudinary.com/dlhcsyg0o/image/upload/v1684493989/bear_wvc8fv.jpg"
          },
          "comments": {
            "type": "string",
            "description": "Some text about Pet",
            "comments": "Do not feed the hamster a lot, because a bear will grow up and eat you."
          },
          "owner": {
            "type": "object",
            "properties": {
              "_id": {
                "type": "string",
                "description": "User's id",
                "example": "63f3306945cc47c53a8fd33d"
              },
              "email": {
                "type": "string",
                "description": "User's email",
                "format": "email",
                "example": "masya@mimimi.com"
              },
              "name": {
                "type": "string",
                "description": "User's name",
                "example": "Masya Mi-mi-mi"
              }
            }
          }
        },
        "example": {
          "_id": "63f330d345cc47c53a8fd34e",
          "category": "sell",
          "title": "Small fluffy hamster for sale, a descendant of a pet grizzly bear",
          "name": "Pipectobi",
          "birthDate": "13.13.2013",
          "breed": "Grizzly bear (YA tvoy dom truba shatal)",
          "sex": "male",
          "location": "New York, NY",
          "price": 500,
          "avatarURL": "https://res.cloudinary.com/dlhcsyg0o/image/upload/v1684493989/bear_wvc8fv.jpg",
          "comments": "Do not feed the hamster a lot, because a bear will grow up and eat you.",
          "owner": {
            "_id": "63f3306945cc47c53a8fd33d",
            "email": "masya@mimimi.com",
            "name": "Masya Mi-mi-mi"
          }
        }
      },

      "FavoriteNotices": {
        "type": "object",
        "properties": {
          "user": {
            "type": "object",
            "properties": {
              "email": {
                "type": "string",
                "format": "email"
              },
              "favoriteNotices": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },

    "securitySchemes": {
      "Bearer": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}
